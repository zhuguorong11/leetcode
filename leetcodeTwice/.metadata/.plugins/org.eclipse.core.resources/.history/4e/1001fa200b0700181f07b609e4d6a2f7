import java.awt.Robot;

/**
 * Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's
 * (representing land) connected 4-directionally (horizontal or vertical.) You
 * may assume all four edges of the grid are surrounded by water.
 * 
 * Find the maximum area of an island in the given 2D array. (If there is no
 * island, the maximum area is 0.)
 * 
 * Example 1: [[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0],
 * [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0],
 * [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0],
 * [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]] Given the above
 * grid, return 6. Note the answer is not 11, because the island must be
 * connected 4-directionally. Example 2: [[0,0,0,0,0,0,0,0]] Given the above
 * grid, return 0.
 * 
 * @author zhugr
 *
 */
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	int maxArea = 0;
	int row;
	int col;
	public int maxAreaOfIsland(int[][] grid) {
		row = grid.length;
		col = grid[0].length;
		for(int i = 0; i < row; ++i){
			for(int j = 0; j < col; ++j){
				int area = dfs(i, j, grid, 0);
				maxArea = Math.max(maxArea, area);
			}
		}
	}
	public void dfs(int i, int j,int[][] grid, int area){
		if(i < 0 || j < 0 || i >= row || j >= col || grid[i][j] != 1){
			return area;
		}
	}
}
