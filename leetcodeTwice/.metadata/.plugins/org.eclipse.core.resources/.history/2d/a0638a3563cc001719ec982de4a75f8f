/**
 * Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....
 * 
 * Example: (1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6]. 
			(2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].
 * 
 * Note: You may assume all input has valid answer.
 * 
 * Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?
 * 
 * @author zhugr
 *
 */
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {1, 5, 1, 1, 6, 4};
		Solution solution = new Solution();
		solution.wiggleSort(nums);
		System.out.println(nums);
	}

	/*
	 * we find that when i is odd,that should satisfy conditon like nums[i] > nums[i-1]
	 * 				when i is even,that should satisfy condition like nums[i] < nums[i-1]
	 * */
	public void wiggleSort(int[] nums) {
		if(nums == null || nums.length == 0)
		{
			return;
		}
		if(nums.length == 1)
		{
			return;
		}
		for(int i = 1; i < nums.length; ++i){
			if((i & 1) == 1 && nums[i] <= nums[i - 1] || (i & 1) == 0 && nums[i] >= nums[i - 1]){
				swap(nums, i, i-1);
			}
		}
	}
	public void swap(int[] nums, int i ,int j){
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
}
