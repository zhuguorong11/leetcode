import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * Given two words (beginWord and endWord), and a dictionary's word list, find
 * all shortest transformation sequence(s) from beginWord to endWord, such that:
 * 
 * Only one letter can be changed at a time Each transformed word must exist in
 * the word list. Note that beginWord is not a transformed word. For example,
 * 
 * Given: beginWord = "hit" endWord = "cog" wordList =
 * ["hot","dot","dog","lot","log","cog"] Return [
 * ["hit","hot","dot","dog","cog"], ["hit","hot","lot","log","cog"] ] Note:
 * Return an empty list if there is no such transformation sequence. All words
 * have the same length. All words contain only lowercase alphabetic characters.
 * You may assume no duplicates in the word list. You may assume beginWord and
 * endWord are non-empty and are not the same.
 * 
 * @author zhugr
 *
 */
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
		HashSet<String> dict = new HashSet<>(wordList);
		List<List<String>> res = new ArrayList<List<String>>();
		/* 用一个map来记录每一个字符串节点的邻居节点，即改变一个字母就能相等的节点 */
		HashMap<String, ArrayList<String>> neighbors = new HashMap<>();
		/* 用一个map来记录每一个字符串节点到start节点的距离 */
		HashMap<String, Integer> distances = new HashMap<>();

	}

	/* 用bfs来构建每个节点的关系图 */
	public void bfs(String beginWord, String endWord, Map<String, ArrayList<String>> neighbors,
			Map<String, Integer> distances) {

	}

	/* 查找所有下一个节点 */
	public ArrayList<String> findNeighbors(String curNode, Set<String> dict) {

	}

	/* 用dfs来查找所有最短的集合 */
	public void dfs(String beginWord, String endWord, Map<String, ArrayList<String>> neighbors,
			Map<String, Integer> distances, List<List<String>> res, List<String> solutions) {

	}
}
