import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Implement a MapSum class with insert, and sum methods.
 * 
 * For the method insert, you'll be given a pair of (string, integer). The
 * string represents the key and the integer represents the value. If the key
 * already existed, then the original key-value pair will be overridden to the
 * new one.
 * 
 * For the method sum, you'll be given a string representing the prefix, and you
 * need to return the sum of all the pairs' value whose key starts with the
 * prefix.
 * 
 * Example 1: Input: insert("apple", 3), Output: Null Input: sum("ap"), Output:
 * 3 Input: insert("app", 2), Output: Null Input: sum("ap"), Output: 5
 * 
 * @author zhugr
 *
 */
public class MapSum {

	/** Initialize your data structure here. */
	Node root;

	public MapSum() {
		/// 初始化trie 树
		root = new Node();
	}

	public void insert(String key, int val) {
		key = key.toLowerCase();//// 转化为小写
		char[] chrs = key.toCharArray();
		int length = chrs.length;
		for (int i = 0; i < length; ++i) {
			/// 用相对于a字母的值作为下标索引，也隐式地记录了该字母的值
			int index = chrs[i] - 'a';
			if (root.childs[index] != null) {
				root.childs[index].prefix_num++;

			} else {
				root.childs[index] = new Node();
				root.childs[index].prefix_num++;
			}
			if (i == length - 1) {
				root.childs[index].isLeaf = true;
				root.childs[index].value = val;
				// root.childs[index].dumpli_num++;
			}
			root = root.childs[index];
		}
	}

	public int sum(String prefix) {
		int sum = 0;
		Map<String, Integer> map = travel(prefix);
		Iterator<String> iterator = map.keySet().iterator();
		while (iterator.hasNext()) {
			String key = iterator.next();
			sum += map.get(key);
		}
		return sum;
	}

	public Map<String, Integer> travel(String prefix) {
		char[] chrs = prefix.toLowerCase().toCharArray();
		int len = chrs.length;
		for (int i = 0; i < len; ++i) {
			int index = chrs[i] - 'a';
			if (root.childs[index] == null) {
				return null;
			}
			root = root.childs[index];
		}
		return preTraversal(root, prefix);
	}

	public Map<String, Integer> preTraversal(Node root, String prefixs) {
		Map<String, Integer> map = new HashMap<String, Integer>();
		if (root != null) {
			if (root.isLeaf) {
				map.put(prefixs, root.value);
			}
			int len = root.childs.length;
			for (int i = 0; i < len; ++i) {
				if (root.childs[i] != null) {
					char temp = (char) ('a' + i);
					String tempStr = prefixs + temp;
					map.putAll(preTraversal(root.childs[i], tempStr));
				}
			}
		}
		return map;
	}

	public static void main(String[] args) {
		MapSum obj = new MapSum();
		obj.insert("apple", 3);
		int param_2 = obj.sum("ap");
	}
}

class Node {
	// public int dumpli_num;//// 到达末尾该字串的重复数目， 该属性统计重复次数的时候有用,取值为0、1、2、3、4、5……
	public int prefix_num;// 以该字串为前缀的字串数， 应该包括该字串本身！！！！！
	public boolean isLeaf;
	public int value;
	public Node childs[];

	public Node() {
		// dumpli_num = 0;
		prefix_num = 0;
		value = 0;
		isLeaf = false;
		childs = new Node[26];
	}
}
