import java.sql.Savepoint;

/**
 * Given a root node reference of a BST and a key, delete the node with the
 * given key in the BST. Return the root node reference (possibly updated) of
 * the BST.
 * 
 * Basically, the deletion can be divided into two stages:
 * 
 * Search for a node to remove. If the node is found, delete the node. Note:
 * Time complexity should be O(height of tree).
 * 
 * Example:
 * 
 * root = [5,3,6,2,4,null,7] key = 3
 * 
 * 5 / \ 3 6 / \ \ 2 4 7
 * 
 * Given key to delete is 3. So we find the node with value 3 and delete it.
 * 
 * One valid answer is [5,4,6,2,null,null,7], shown in the following BST.
 * 
 * 5 / \ 4 6 / \ 2 7
 * 
 * Another valid answer is [5,2,6,null,4,null,7].
 * 
 * 5 / \ 2 6 \ \ 4 7
 * 
 * @author zhugr
 *
 */
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public TreeNode deleteNode(TreeNode root, int key) {
		TreeNode curNode = root;
		TreeNode pre = null;// previous of curNode

		// find the node we want to delete
		while (curNode != null && curNode.val != key) {
			pre = curNode;// save previous node
			if (curNode.val < key)
				curNode = curNode.right;
			else
				curNode = curNode.left;
		}
		if (pre == null)
			deleteNodeWant(root);
		else if (pre.left == curNode)
			pre.left = deleteNodeWant(curNode);
		else
			pre.right = deleteNodeWant(curNode);
		return root;
	}

	public TreeNode deleteNodeWant(TreeNode node) {
		if (node == null)
			return null;
		if (node.left == null)
			return node.right;
		if (node.right == null)
			return node.left;
		//find the far left of right subtree
		TreeNode next = node.right;
		TreeNode pre = null;Save the previous of next
		while(next.left != null)
		{
			pre = next;
			next = next.left;
		}
		next.left = node.left;
		if(next != node.right){//means the node.right has left subtree
			
		}
	}
}

class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;

	TreeNode(int x) {
		val = x;
	}
}