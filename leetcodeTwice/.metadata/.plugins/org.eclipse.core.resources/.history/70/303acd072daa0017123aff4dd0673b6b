import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Given a non-empty string s and a dictionary wordDict containing a list of
 * non-empty words, add spaces in s to construct a sentence where each word is a
 * valid dictionary word. You may assume the dictionary does not contain
 * duplicate words.
 * 
 * Return all such possible sentences.
 * 
 * For example, given s = "catsanddog", dict = ["cat", "cats", "and", "sand", "dog"].
 * 
 * A solution is ["cats and dog", "cat sand dog"].
 * 
 * @author zhugr
 *
 */
public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public List<String> wordBreak(String s, List<String> wordDict) {
		List<String> res = new ArrayList<>();
		res = helper(s, wordDict, new HashMap<>());
		return res;
	}
	// use map to save the previous results to prune duplicated branches
	public List<String> helper(String s, List<String> wordDict, Map<String, List<String>> map) {
		if (map.containsKey(s))
			return map.get(s);
		List<String> res = new ArrayList<>();
		if (s.length() == 0) {
			res.add("");
			return res;
		}
		for (String word : wordDict) {
			if(s.startsWith(word)){
				List<String> subList = helper(s.substring(word.length()), wordDict, map);
				for (String string : subList) {
					res.add(word + (string.isEmpty() ? "" : " ") + string);
				}
			}
		}
		map.put(s, res);
		return res;
	}
}
